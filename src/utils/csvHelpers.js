// src/utils/csvHelpers.js

/**
 * CSV Generation Helper Functions
 * Generates comprehensive proctoring reports in CSV format
 */

// Generate comprehensive CSV report
export const generateProctoringCSV = (candidateData, logs, sessionInfo) => {
  const {
    candidateName = 'Unknown',
    candidateId = 'N/A',
    startTime,
    endTime,
    sessionId
  } = candidateData;

  // Calculate statistics
  const focusLostCount = logs.filter(l => 
    l.type === 'look-away' || l.type === 'focus-lost'
  ).length;

  const suspiciousEvents = logs.filter(l =>
    ['multiple-faces', 'no-face', 'phone-detected', 'notes-detected', 
     'book', 'laptop', 'keyboard', 'mouse', 'notebook', 'paper'].includes(l.type)
  );

  const integrityScore = Math.max(0, 100 - (focusLostCount * 5 + suspiciousEvents.length * 10));

  // Calculate duration
  const duration = startTime && endTime 
    ? Math.round((new Date(endTime) - new Date(startTime)) / (1000 * 60))
    : 0;

  // Format timestamps
  const formatTimestamp = (timestamp) => {
    try {
      return new Date(timestamp).toISOString();
    } catch {
      return timestamp || 'Invalid Date';
    }
  };

  // Build CSV content
  let csvContent = '';

  // Header Section
  csvContent += 'TUTEDUDE PROCTORING REPORT\\n';
  csvContent += '==========================\\n';
  csvContent += `Generated On,${new Date().toISOString()}\\n`;
  csvContent += '\\n';

  // Summary Section
  csvContent += 'CANDIDATE INFORMATION\\n';
  csvContent += '--------------------\\n';
  csvContent += `Candidate Name,${candidateName}\\n`;
  csvContent += `Candidate ID,${candidateId}\\n`;
  csvContent += `Session ID,${sessionId || 'N/A'}\\n`;
  csvContent += '\\n';

  // Interview Details
  csvContent += 'INTERVIEW DETAILS\\n';
  csvContent += '----------------\\n';
  csvContent += `Start Time,${formatTimestamp(startTime)}\\n`;
  csvContent += `End Time,${formatTimestamp(endTime)}\\n`;
  csvContent += `Duration (minutes),${duration}\\n`;
  csvContent += `Total Events Logged,${logs.length}\\n`;
  csvContent += '\\n';

  // Performance Metrics
  csvContent += 'PERFORMANCE METRICS\\n';
  csvContent += '------------------\\n';
  csvContent += `Focus Lost Count,${focusLostCount}\\n`;
  csvContent += `Suspicious Events Count,${suspiciousEvents.length}\\n`;
  csvContent += `Integrity Score,${integrityScore}/100\\n`;
  csvContent += `Overall Status,${integrityScore >= 70 ? 'PASS' : integrityScore >= 50 ? 'WARNING' : 'FAIL'}\\n`;
  csvContent += '\\n';

  // Event Summary by Type
  csvContent += 'EVENT SUMMARY BY TYPE\\n';
  csvContent += '--------------------\\n';
  const eventCounts = {};
  logs.forEach(log => {
    eventCounts[log.type] = (eventCounts[log.type] || 0) + 1;
  });

  Object.entries(eventCounts)
    .sort(([,a], [,b]) => b - a)
    .forEach(([eventType, count]) => {
      csvContent += `${eventType},${count}\\n`;
    });
  csvContent += '\\n';

  // Detailed Event Logs
  csvContent += 'DETAILED EVENT LOGS\\n';
  csvContent += '------------------\\n';
  csvContent += 'Timestamp,Event Type,Message,Duration,Metadata\\n';

  logs.forEach(log => {
    const timestamp = formatTimestamp(log.timestamp);
    const message = (log.message || '').replace(/,/g, ';').replace(/\\n/g, ' ');
    const duration = log.meta?.awayDurationMs ? `${Math.round(log.meta.awayDurationMs / 1000)}s` : '';
    const metadata = log.meta ? JSON.stringify(log.meta).replace(/,/g, ';') : '';
    
    csvContent += `${timestamp},${log.type},${message},${duration},${metadata}\\n`;
  });

  // Footer
  csvContent += '\\n';
  csvContent += 'REPORT END\\n';
  csvContent += '==========\\n';
  csvContent += `Report generated by Tutedude Proctoring System v1.0\\n`;
  csvContent += `Total processing time: ${logs.length > 0 ? duration : 0} minutes\\n`;

  return csvContent;
};

// Download CSV file
export const downloadCSV = (csvContent, filename = 'ProctoringReport.csv') => {
  try {
    // Create blob
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);

    // Create download link
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', filename);
    link.style.visibility = 'hidden';
    
    // Trigger download
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    // Cleanup
    URL.revokeObjectURL(url);
    
    console.log(`✅ CSV report downloaded: ${filename}`);
    return true;
  } catch (error) {
    console.error('❌ Failed to download CSV:', error);
    return false;
  }
};

// Generate filename with timestamp
export const generateCSVFilename = (candidateName, candidateId) => {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
  const safeName = (candidateName || 'Unknown').replace(/[^a-zA-Z0-9]/g, '_');
  const safeId = (candidateId || 'NA').replace(/[^a-zA-Z0-9]/g, '_');
  
  return `ProctoringReport_${safeName}_${safeId}_${timestamp}.csv`;
};

// Validate CSV data before generation
export const validateCSVData = (candidateData, logs) => {
  const errors = [];

  if (!candidateData.candidateName?.trim()) {
    errors.push('Candidate name is required');
  }

  if (!Array.isArray(logs)) {
    errors.push('Logs must be an array');
  }

  if (logs.length === 0) {
    errors.push('No events to export');
  }

  logs.forEach((log, index) => {
    if (!log.type) errors.push(`Event ${index + 1}: Missing event type`);
    if (!log.timestamp) errors.push(`Event ${index + 1}: Missing timestamp`);
    if (!log.message) errors.push(`Event ${index + 1}: Missing message`);
  });

  return {
    isValid: errors.length === 0,
    errors
  };
};

// Export comprehensive report
export const exportProctoringReport = (candidateData, logs, sessionInfo = {}) => {
  // Validate data
  const validation = validateCSVData(candidateData, logs);
  if (!validation.isValid) {
    console.error('❌ CSV validation failed:', validation.errors);
    alert('Cannot generate report: ' + validation.errors.join(', '));
    return false;
  }

  try {
    // Generate CSV content
    const csvContent = generateProctoringCSV(candidateData, logs, sessionInfo);
    
    // Generate filename
    const filename = generateCSVFilename(
      candidateData.candidateName, 
      candidateData.candidateId
    );
    
    // Download file
    const success = downloadCSV(csvContent, filename);
    
    if (success) {
      console.log(`✅ Proctoring report exported successfully: ${filename}`);
    }
    
    return success;
  } catch (error) {
    console.error('❌ Failed to export report:', error);
    alert('Failed to generate report. Please try again.');
    return false;
  }
};
